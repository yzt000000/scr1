<?xml version="1.0" encoding="utf-8"?>
<ipxact:component xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:snps="http://www.synopsys.com/SPIRIT-snps" xsi:schemaLocation="http://www.accellera.org/XMLSchema/IPXACT/1685-2014 http://www.accellera.org/XMLSchema/IPXACT/1685-2014/index.xsd">
  <ipxact:vendor>Synopsys</ipxact:vendor>
  <ipxact:library>DesignWareLibrary</ipxact:library>
  <ipxact:name>i_uart_DW_apb_uart</ipxact:name>
  <ipxact:version>4.01a</ipxact:version>
  <ipxact:busInterfaces>
    <ipxact:busInterface>
      <ipxact:name>APB_Slave</ipxact:name>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PRDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>prdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PADDR</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>paddr</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PENABLE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>penable</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PSELx</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>psel</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PWDATA</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pwdata</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PWRITE</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pwrite</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:slave>
        <ipxact:memoryMapRef memoryMapRef="uart_memory_map"/>
      </ipxact:slave>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MemoryMap">uart_memory_map</snps:attribute>
          <snps:interfaceParameter>
            <name>APB3</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>APB4</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>BigEndian</name>
            <snps:attribute name="InterfaceLink">&lt;open&gt;</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfaceParameter>
            <name>DataWidth</name>
            <snps:attribute name="InterfaceLink">APB_DATA_WIDTH</snps:attribute>
          </snps:interfaceParameter>
          <snps:interfacePort>
            <name>PADDR</name>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>PRDATA</name>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
          <snps:interfacePort>
            <name>PWDATA</name>
            <snps:attribute name="BusAlignment">slice</snps:attribute>
          </snps:interfacePort>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>PCLK</ipxact:name>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PCLK</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>pclk</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>APB_CLK</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>PRESETn</ipxact:name>
      <ipxact:busType vendor="amba.com" library="busdef.amba.amba3" name="apb" version="r1p0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="amba.com" library="busdef.amba.amba3" name="apb_rtl" version="r1p0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>PRESETn</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>presetn</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:system>
        <ipxact:group>APB_RESET</ipxact:group>
      </ipxact:system>
    </ipxact:busInterface>
    <ipxact:busInterface>
      <ipxact:name>SIO</ipxact:name>
      <ipxact:busType vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Serial-IO" version="1.0"/>
      <ipxact:abstractionTypes>
        <ipxact:abstractionType>
          <ipxact:abstractionRef vendor="Synopsys" library="DesignWareLibrary" name="DW-SoC::Serial-IO_rtl" version="1.0"/>
          <ipxact:portMaps>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>sin</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>sin</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>sout</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>sout</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>cts_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>cts_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
            <ipxact:portMap>
              <ipxact:logicalPort>
                <ipxact:name>rts_n</ipxact:name>
              </ipxact:logicalPort>
              <ipxact:physicalPort>
                <ipxact:name>rts_n</ipxact:name>
              </ipxact:physicalPort>
            </ipxact:portMap>
          </ipxact:portMaps>
        </ipxact:abstractionType>
      </ipxact:abstractionTypes>
      <ipxact:mirroredSlave/>
      <ipxact:vendorExtensions>
        <snps:busInterface>
          <snps:attribute name="MaxConsumers">1</snps:attribute>
          <snps:attribute name="MinConsumers">1</snps:attribute>
        </snps:busInterface>
      </ipxact:vendorExtensions>
    </ipxact:busInterface>
  </ipxact:busInterfaces>
  <ipxact:memoryMaps>
    <ipxact:memoryMap>
      <ipxact:name>uart_memory_map</ipxact:name>
      <ipxact:addressBlock>
        <ipxact:name>uart_address_block</ipxact:name>
        <ipxact:baseAddress>'h0</ipxact:baseAddress>
        <ipxact:range>'h1000</ipxact:range>
        <ipxact:width>32</ipxact:width>
        <ipxact:register>
          <ipxact:name>RBR</ipxact:name>
          <ipxact:displayName>Receive Buffer Register</ipxact:displayName>
          <ipxact:description>Receive Buffer Register.
Reset Value: 0x0 
 This register can be accessed only when the DLAB bit (LCR[7]) is cleared.</ipxact:description>
          <ipxact:addressOffset>'h0</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>RBR</ipxact:name>
            <ipxact:description>Receive Buffer Register.
 This register contains the data byte received on the serial input port (sin) in UART mode or the serial infrared input (sir_in) in infrared mode. The data in this register is valid only if the Data Ready (DR) bit in the Line status Register (LSR) is set. 
 If in non-FIFO mode (FIFO_MODE == NONE) or FIFOs are disabled (FCR[0] set to 0), the data in the RBR must be read before the next data arrives, otherwise it will be overwritten, resulting in an over-run error.
 If in FIFO mode (FIFO_MODE != NONE) and FIFOs are enabled (FCR[0] set to 1), this register accesses the head of the receive FIFO. If the receive FIFO is full and this register is not read before the next data character arrives, then the data already in the FIFO will be preserved but any incoming data will be lost and an over-run error occurs.
Note:

          When UART_9BIT_DATA_EN=0, this field width is 8. 

          When UART_9BIT_DATA_EN=1, this field width is 9.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_RBR</ipxact:name>
            <ipxact:description>RBR 31to9or8 Reserved bits and read as zero (0).</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:alternateRegisters>
            <ipxact:alternateRegister>
              <ipxact:name>DLL</ipxact:name>
              <ipxact:displayName>Divisor Latch (Low)</ipxact:displayName>
              <ipxact:description>Divisor Latch (Low). 
Reset Value: 0x0.
 If UART_16550_COMPATIBLE = No, then this register can be accessed only when the DLAB bit (LCR[7]) is set and the UART is not busy - that is, USR[0] is 0; otherwise this register can be accessed only when the DLAB bit (LCR[7]) is set.</ipxact:description>
              <ipxact:alternateGroups>
                <ipxact:alternateGroup>DLL</ipxact:alternateGroup>
              </ipxact:alternateGroups>
              <ipxact:volatile>false</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:field>
                <ipxact:name>DLL</ipxact:name>
                <ipxact:description>Divisor Latch (Low).
 This register makes up the lower 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART.
 The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor).
 Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications will occur. Also, once the DLL is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>0</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>8</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RSVD_DLL_31to8</ipxact:name>
                <ipxact:description>DLL 31to8 Reserved bits and read as zero (0).</ipxact:description>
                <ipxact:bitOffset>8</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>24</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
            </ipxact:alternateRegister>
            <ipxact:alternateRegister>
              <ipxact:name>THR</ipxact:name>
              <ipxact:displayName>Transmit Holding Register</ipxact:displayName>
              <ipxact:description>Transmit Holding Register.
Reset Value: 0x0.
 This register can be accessed only when the DLAB bit (LCR[7]) is cleared.</ipxact:description>
              <ipxact:alternateGroups>
                <ipxact:alternateGroup>THR</ipxact:alternateGroup>
              </ipxact:alternateGroups>
              <ipxact:volatile>false</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:field>
                <ipxact:name>THR</ipxact:name>
                <ipxact:description>Transmit Holding Register.
 This register contains data to be transmitted on the serial output port (sout) in UART mode or the serial infrared output (sir_out_n) in infrared mode. Data should only be written to the THR when the THR Empty (THRE) bit (LSR[5]) is set.
 If in non-FIFO mode or FIFO's are disabled (FCR[0] set to zero) and THRE is set, writing a single character to the THR clears the THRE. Any additional writes to the THR before the THRE is set again causes the THR data to be overwritten.
 If in FIFO mode and FIFO's are enabled (FCR[0] set to one) and THRE is set, x number of characters of data may be written to the THR before the FIFO is full. The number x (default=16) is determined by the value of FIFO Depth that is set during configuration. Any attempt to write data when the FIFO is full results in the write data being lost.
Note:

          When UART_9BIT_DATA_EN=0, this field width is 8. 

          When UART_9BIT_DATA_EN=1, this field width is 9. The 9th bit is applicable only when LCR_EXT[3]=1.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>0</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>8</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RSVD_THR</ipxact:name>
                <ipxact:description>THR 31to9or8 Reserved bits and read as zero (0).</ipxact:description>
                <ipxact:bitOffset>8</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>24</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
            </ipxact:alternateRegister>
          </ipxact:alternateRegisters>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IER</ipxact:name>
          <ipxact:displayName>Interrupt Enable Register</ipxact:displayName>
          <ipxact:description>Interrupt Enable Register. 
Reset Value: 0x0.
 This register can be accessed only when the DLAB bit (LCR[7]) is cleared.</ipxact:description>
          <ipxact:addressOffset>'h4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>ERBFI</ipxact:name>
            <ipxact:description>Enable Received Data Available Interrupt. This is used to enable/disable the generation of Received Data Available Interrupt and the Character Timeout Interrupt (if in FIFO mode and FIFO's enabled). These are the second highest priority interrupts.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable Receive data Interrupt</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable Receive data Interrupt</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ETBEI</ipxact:name>
            <ipxact:description>Enable Transmit Holding Register Empty Interrupt. This is used to enable/disable the generation of Transmitter Holding Register Empty Interrupt. This is the third highest priority interrupt.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable Transmit empty interrupt</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable Transmit empty interrupt</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ELSI</ipxact:name>
            <ipxact:description>Enable Receiver Line Status Interrupt. This is used to enable/disable the generation of Receiver Line Status Interrupt. This is the highest priority interrupt.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable Receiver Line Status Interrupt</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable Receiver Line Status Interrupt</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EDSSI</ipxact:name>
            <ipxact:description>Enable Modem Status Interrupt. This is used to enable/disable the generation of Modem Status Interrupt. This is the fourth highest priority interrupt.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable Modem Status Interrupt</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable Modem Status Interrupt</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>ELCOLR</ipxact:name>
            <ipxact:description>Interrupt Enable Register: ELCOLR, this bit controls the method for clearing the status in the LSR register.
This is applicable only for Overrun Error, Parity Error, Framing Error, and Break Interrupt status bits.
0 = LSR status bits are cleared either on reading Rx FIFO (RBR Read) or On reading LSR register.
1 = LSR status bits are cleared only on reading LSR register.
Writeable only when LSR_STATUS_CLEAR == Enabled, always readable.
</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable ALC</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable ALC</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IER_6to5</ipxact:name>
            <ipxact:description>IER 6to5 Reserved bits read as zero (0).</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PTIME</ipxact:name>
            <ipxact:description>Programmable THRE Interrupt Mode Enable. Writeable only when THRE_MODE_USER == Enabled, always readable.  This is used to enable/disable the generation of THRE Interrupt. 
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Disable Programmable THRE Interrupt Mode</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Enable Programmable THRE Interrupt Mode</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IER_31to8</ipxact:name>
            <ipxact:description>IER 31to8 Reserved bits and read as zero (0).</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:alternateRegisters>
            <ipxact:alternateRegister>
              <ipxact:name>DLH</ipxact:name>
              <ipxact:displayName>Divisor Latch High</ipxact:displayName>
              <ipxact:description>Divisor Latch High (DLH) Register.
Reset Value: 0x0
 If UART_16550_COMPATIBLE = No, then this register can be accessed only when the DLAB bit (LCR[7]) is set and the UART is not busy, that is, USR[0] is 0; otherwise this register can be accessed only when the DLAB bit (LCR[7]) is set.</ipxact:description>
              <ipxact:alternateGroups>
                <ipxact:alternateGroup>DLH</ipxact:alternateGroup>
              </ipxact:alternateGroups>
              <ipxact:volatile>false</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:field>
                <ipxact:name>dlh</ipxact:name>
                <ipxact:description>Upper 8-bits of a 16-bit, read/write, Divisor Latch register that contains the baud rate divisor for the UART.
 The output baud rate is equal to the serial clock (pclk if one clock design, sclk if two clock design (CLOCK_MODE == Enabled)) frequency divided by sixteen times the value of the baud rate divisor, as follows: baud rate = (serial clock freq) / (16 * divisor).
 Note that with the Divisor Latch Registers (DLL and DLH) set to zero, the baud clock is disabled and no serial communications will occur. Also, once the DLH is set, at least 8 clock cycles of the slowest DW_apb_uart clock should be allowed to pass before transmitting or receiving data.</ipxact:description>
                <ipxact:bitOffset>0</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>8</ipxact:bitWidth>
                <ipxact:access>read-write</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RSVD_DLH</ipxact:name>
                <ipxact:description>DLH 31to8 Reserved bits and read as zero (0).</ipxact:description>
                <ipxact:bitOffset>8</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>24</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
            </ipxact:alternateRegister>
          </ipxact:alternateRegisters>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>IIR</ipxact:name>
          <ipxact:displayName>Interrupt Identification Register</ipxact:displayName>
          <ipxact:description>Interrupt Identification Register
Reset Value: 0x1</ipxact:description>
          <ipxact:addressOffset>'h8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>IID</ipxact:name>
            <ipxact:description>Interrupt ID (or IID). This indicates the highest priority pending interrupt which can be one of the following types specified in Values. For information on several levels into which the interrupt priorities are split into, see the 'Interrupts' section in the DW_apb_uart Databook.
Note: an interrupt of type 0111 (busy detect) will never get indicated if UART_16550_COMPATIBLE == YES in coreConsultant.
Reset Value: 0x1
Bit 3 indicates an interrupt can only occur when the FIFOs are enabled and used to distinguish a Character Timeout condition interrupt.</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>4</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>BUSY_DETECT</ipxact:name>
                <ipxact:displayName>busy detect</ipxact:displayName>
                <ipxact:value>0x7</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>CHARACTER_TIMEOUT</ipxact:name>
                <ipxact:displayName>character timeout</ipxact:displayName>
                <ipxact:value>0xc</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>MODEM_STATUS</ipxact:name>
                <ipxact:displayName>modem status</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_INTERRUPT_PENDING</ipxact:name>
                <ipxact:displayName>no interrupt pending</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>RECEIVED_DATA_AVAILABLE</ipxact:name>
                <ipxact:displayName>received data available</ipxact:displayName>
                <ipxact:value>0x4</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>RECEIVER_LINE_STATUS</ipxact:name>
                <ipxact:displayName>receiver line status</ipxact:displayName>
                <ipxact:value>0x6</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>THR_EMPTY</ipxact:name>
                <ipxact:displayName>THR empty</ipxact:displayName>
                <ipxact:value>0x2</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IIR_5to4</ipxact:name>
            <ipxact:description>IIR 5to4 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>FIFOSE</ipxact:name>
            <ipxact:description>FIFOs Enabled (or FIFOSE). This is used to indicate whether the FIFOs are enabled or disabled.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>FIFOs are disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>FIFOs are enabled</ipxact:displayName>
                <ipxact:value>0x3</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_IIR_31to8</ipxact:name>
            <ipxact:description>IIR 31to8 Reserved bits and read as 0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:alternateRegisters>
            <ipxact:alternateRegister>
              <ipxact:name>FCR</ipxact:name>
              <ipxact:displayName>FIFO Control Register</ipxact:displayName>
              <ipxact:description>This register is only valid when the DW_apb_uart is configured to have FIFO's implemented (FIFO_MODE != NONE).  If FIFO's are not implemented, this register does not exist and writing to this register address will have no effect.
Reset Value: 0x0</ipxact:description>
              <ipxact:alternateGroups>
                <ipxact:alternateGroup>FCR</ipxact:alternateGroup>
              </ipxact:alternateGroups>
              <ipxact:volatile>false</ipxact:volatile>
              <ipxact:access>read-write</ipxact:access>
              <ipxact:field>
                <ipxact:name>FIFOE</ipxact:name>
                <ipxact:description>FIFO Enable (or FIFOE). This enables/disables the transmit (XMIT) and receive (RCVR) FIFOs. Whenever the value of this bit is changed both the XMIT and RCVR controller portion of FIFOs is reset.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>0</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>DISABLED</ipxact:name>
                    <ipxact:displayName>FIFO disabled</ipxact:displayName>
                    <ipxact:value>0x0</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>ENABLED</ipxact:name>
                    <ipxact:displayName>FIFO enabled</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RFIFOR</ipxact:name>
                <ipxact:description>RCVR FIFO Reset (or RFIFOR). This resets the control portion of the receive FIFO and treats the FIFO as empty. This will also de-assert the DMA RX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing' and it is not necessary to clear this bit.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>1</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>RESET</ipxact:name>
                    <ipxact:displayName>Receive FIFO reset</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>XFIFOR</ipxact:name>
                <ipxact:description>XMIT FIFO Reset (or XFIFOR). This resets the control portion of the transmit FIFO and treats the FIFO as empty. This will also de-assert the DMA TX request and single signals when additional DMA handshaking signals are selected (DMA_EXTRA == YES). Note that this bit is 'self-clearing' and it is not necessary to clear this bit.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>2</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>RESET</ipxact:name>
                    <ipxact:displayName>Transmit FIFO reset</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>DMAM</ipxact:name>
                <ipxact:description>DMA Mode (or DMAM). This determines the DMA signalling mode used for the dma_tx_req_n and dma_rx_req_n output signals when additional DMA handshaking signals are not selected (DMA_EXTRA == NO). For details on DMA support, refer to 'DMA Support' section of data book.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>3</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>1</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>MODE0</ipxact:name>
                    <ipxact:displayName>Mode 0</ipxact:displayName>
                    <ipxact:value>0x0</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>MODE1</ipxact:name>
                    <ipxact:displayName>Mode 1</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>TET</ipxact:name>
                <ipxact:description>TX Empty Trigger (or TET). Writes will have no effect when THRE_MODE_USER == Disabled. This is used to select the empty threshold level at which the THRE Interrupts will be generated when the mode is active. It also determines when the dma_tx_req_n signal will be asserted when in certain modes of operation. For details on DMA support, refer to 'DMA Support' section of data book.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>4</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>2</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_CHAR_2</ipxact:name>
                    <ipxact:displayName>2 characters in FIFO</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_EMPTY</ipxact:name>
                    <ipxact:displayName>FIFO Empty</ipxact:displayName>
                    <ipxact:value>0x0</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_HALF_FULL</ipxact:name>
                    <ipxact:displayName>FIFO 1/2 full</ipxact:displayName>
                    <ipxact:value>0x3</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_QUARTER_FULL</ipxact:name>
                    <ipxact:displayName>FIFO 1/4 full</ipxact:displayName>
                    <ipxact:value>0x2</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RT</ipxact:name>
                <ipxact:description>RCVR Trigger (or RT). This is used to select the trigger level in the receiver FIFO at which the Received Data Available Interrupt will be generated. In auto flow control mode, it is used to determine when the rts_n signal will be de-asserted only when RTC_FCT is disabled. It also determines when the dma_rx_req_n signal will be asserted when in certain modes of operation. For details on DMA support, refer to 'DMA Support' section of data book.
Reset Value: 0x0</ipxact:description>
                <ipxact:bitOffset>6</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>2</ipxact:bitWidth>
                <ipxact:access>write-only</ipxact:access>
                <ipxact:enumeratedValues>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_CHAR_1</ipxact:name>
                    <ipxact:displayName>1 character in FIFO</ipxact:displayName>
                    <ipxact:value>0x0</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_FULL_2</ipxact:name>
                    <ipxact:displayName>FIFO 2 less than full</ipxact:displayName>
                    <ipxact:value>0x3</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_HALF_FULL</ipxact:name>
                    <ipxact:displayName>FIFO 1/2 full</ipxact:displayName>
                    <ipxact:value>0x2</ipxact:value>
                  </ipxact:enumeratedValue>
                  <ipxact:enumeratedValue>
                    <ipxact:name>FIFO_QUARTER_FULL</ipxact:name>
                    <ipxact:displayName>FIFO 1/4 full</ipxact:displayName>
                    <ipxact:value>0x1</ipxact:value>
                  </ipxact:enumeratedValue>
                </ipxact:enumeratedValues>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
              <ipxact:field>
                <ipxact:name>RSVD_FCR_31to8</ipxact:name>
                <ipxact:description>FCR 31to8 Reserved bits and read as 0.</ipxact:description>
                <ipxact:bitOffset>8</ipxact:bitOffset>
                <ipxact:resets>
                  <ipxact:reset>
                    <ipxact:value>'h0</ipxact:value>
                  </ipxact:reset>
                </ipxact:resets>
                <ipxact:bitWidth>24</ipxact:bitWidth>
                <ipxact:access>read-only</ipxact:access>
                <ipxact:reserved>0</ipxact:reserved>
              </ipxact:field>
            </ipxact:alternateRegister>
          </ipxact:alternateRegisters>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>LCR</ipxact:name>
          <ipxact:displayName>Line Control Register</ipxact:displayName>
          <ipxact:description>Line Control Register
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'hc</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DLS</ipxact:name>
            <ipxact:description>Data Length Select (or CLS as used in legacy).
 If UART_16550_COMPATIBLE == NO then, writeable only when UART is not busy (USR[0] is zero), otherwise always writable and always readable. When DLS_E in LCR_EXT is set to 0, this register is used to select the number of data bits per character that the peripheral will transmit and receive.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>2</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>CHAR_5BITS</ipxact:name>
                <ipxact:displayName>5 data bits per character</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>CHAR_6BITS</ipxact:name>
                <ipxact:displayName>6 data bits per character</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>CHAR_7BITS</ipxact:name>
                <ipxact:displayName>7 data bits per character</ipxact:displayName>
                <ipxact:value>0x2</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>CHAR_8BITS</ipxact:name>
                <ipxact:displayName>8 data bits per character</ipxact:displayName>
                <ipxact:value>0x3</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>STOP</ipxact:name>
            <ipxact:description>Number of stop bits.

If UART_16550_COMPATIBLE == NO then, writeable only when UART is not busy (USR[0]
is zero), otherwise always writable and always readable. This is used to select the number
of stop bits per character that the peripheral will transmit and receive. If set to
zero, one stop bit is transmitted in the serial data.
 If set to one and the data
bits are set to 5 (LCR[1:0] set to zero) one and a half stop bits is transmitted.
Otherwise, two stop bits are transmitted.
Note that regardless of the number of stop bits selected the receiver will only
check the first stop bit.
Note: NOTE: The STOP bit duration implemented by DW_apb_uart may appear longer
due to idle time inserted between characters for some configurations and baud
clock divisor values in the transmit direction; for details on idle time between
transmitted transfers, refer to 'Back-to-Back Character Stream Transmission' section in data book.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>STOP_1BIT</ipxact:name>
                <ipxact:displayName>1 stop bit</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>STOP_1_5BIT_OR_2BIT</ipxact:name>
                <ipxact:displayName>1.5 stop bits when DLS (LCR[1:0]) is zero, else 2 stop bit</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PEN</ipxact:name>
            <ipxact:description>Parity Enable
.
If UART_16550_COMPATIBLE == NO then, writeable only when UART is not busy (USR[0]
is zero), otherwise always writable and always readable. This bit is used to enable
and disable parity generation and detection in transmitted and received serial
character respectively.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>disable parity</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>enable parity</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>EPS</ipxact:name>
            <ipxact:description>Even Parity Select.

If UART_16550_COMPATIBLE == NO then, writeable only when UART is not busy (USR[0]
is zero), otherwise always writable and always readable. This is used to select
between even and odd parity, when parity is enabled (PEN set to one). If set to
one, an even number of logic '1's is transmitted or checked. If set to zero, an
odd number of logic '1's is transmitted or checked.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>EVEN_PARITY</ipxact:name>
                <ipxact:displayName>an even parity is transmitted or checked</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ODD_PARITY</ipxact:name>
                <ipxact:displayName>an odd parity is transmitted or checked</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SP</ipxact:name>
            <ipxact:description>Stick Parity.
 If UART_16550_COMPATIBLE = NO, then writeable only when UART is 
not busy (USR[0] is 0); otherwise always writable and always readable. This bit is used 
to force parity value. When PEN, EPS and Stick Parity are set to 1, the parity bit is 
transmitted and checked as logic 0. If PEN and Stick Parity are set to 1 and EPS is a 
logic 0, then parity bit is transmitted and checked as a logic 1. If this bit is set to 0, 
Stick Parity is disabled.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Stick parity disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Stick parity enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BC</ipxact:name>
            <ipxact:description>Break Control Bit.

This is used to cause a break condition to be transmitted to the receiving device.
If set to one the serial output is forced to the spacing (logic 0) state. When
not in Loopback Mode, as determined by MCR[4], the sout line is forced low until
the Break bit is cleared. If SIR_MODE == Enabled and active (MCR[6] set to one)
the sir_out_n line is continuously pulsed. When in Loopback Mode, the break
condition is internally looped back to the receiver and the sir_out_n line is
forced low.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Serial output is released for data transmission</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Serial output is forced to spacing state</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DLAB</ipxact:name>
            <ipxact:description>Divisor Latch Access Bit.

If UART_16550_COMPATIBLE == NO then, writeable only when UART is not busy (USR[0]
is zero), otherwise always writable and always readable. This bit is used to enable
reading and writing of the Divisor Latch register (DLL and DLH/LPDLL and LPDLH) to set the baud
rate of the UART. This bit must be cleared after initial baud rate setup in order
to access other registers.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Divisor Latch register is writable only when UART Not BUSY</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Divisor Latch register is always readable and writable</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_LCR_31to8</ipxact:name>
            <ipxact:description>LCR 31to8 Reserved bits and read as 0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MCR</ipxact:name>
          <ipxact:displayName>Modem Control Register</ipxact:displayName>
          <ipxact:description>Modem Control Register
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'h10</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>DTR</ipxact:name>
            <ipxact:description>Data Terminal Ready.

This is used to directly control the Data Terminal Ready (dtr_n) output. The value
written to this location is inverted and driven out on dtr_n.

The Data Terminal Ready output is used to inform the modem or data set that the
UART is ready to establish communications. Note that in Loopback mode (MCR[4]
set to one), the dtr_n output is held inactive high while the value of this
location is internally looped back to an input.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>dtr_n asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>dtr_n de-asserted (logic1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RTS</ipxact:name>
            <ipxact:description>Request to Send.
 
This is used to directly control the Request to Send (rts_n) output. The Request
To Send (rts_n) output is used to inform the modem or data set that the UART is
ready to exchange data.

When Auto RTS Flow Control is not enabled (MCR[5] set to zero), the rts_n signal
is set low by programming MCR[1] (RTS) to a high.
In Auto Flow Control, AFCE_MODE == Enabled and active (MCR[5] set to one) and
FIFO's enable (FCR[0] set to one), the rts_n output is controlled in the same way,
but is also gated with the receiver FIFO threshold trigger (rts_n is inactive high
when above the threshold).
The rts_n signal will be de-asserted when MCR[1] is set low.
Note that in Loopback mode (MCR[4] set to one), the rts_n output is held inactive
high while the value of this location is internally looped back to an input.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ACTIVE</ipxact:name>
                <ipxact:displayName>Request to Send rts_n asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>INACTIVE</ipxact:name>
                <ipxact:displayName>Request to Send rts_n de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OUT1</ipxact:name>
            <ipxact:description>OUT1
.
This is used to directly control the user-designated Output1 (out1_n) output. The
value written to this location is inverted and driven out on out1_n.
Note that in Loopback mode (MCR[4] set to one), the out1_n output is held inactive high
while the value of this location is internally looped back to an input.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>OUT1_0</ipxact:name>
                <ipxact:displayName>out1_n de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>OUT1_1</ipxact:name>
                <ipxact:displayName>out1_n asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OUT2</ipxact:name>
            <ipxact:description>OUT2
.
This is used to directly control the user-designated Output2 (out2_n) output. The
value written to this location is inverted and driven out on out2_n.
Note that in Loopback mode (MCR[4] set to one), the out2_n output is held inactive
high while the value of this location is internally looped back to an input.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>OUT2_0</ipxact:name>
                <ipxact:displayName>out2_n de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>OUT2_1</ipxact:name>
                <ipxact:displayName>out2_n asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>LoopBack</ipxact:name>
            <ipxact:description>LoopBack Bit
.
This is used to put the UART into a diagnostic mode for test purposes.
If operating in UART mode (SIR_MODE != Enabled OR NOT active, MCR[6] set to zero),
data on the sout line is held high, while serial data output is looped back to the
sin line, internally. In this mode all the interrupts are fully functional. Also,
in loopback mode, the modem control inputs (dsr_n, cts_n, ri_n, dcd_n) are
disconnected and the modem control outputs (dtr_n, rts_n, out1_n, out2_n) are looped
back to the inputs, internally.

If operating in infrared mode (SIR_MODE == Enabled AND active, MCR[6] set to one),
data on the sir_out_n line is held low, while serial data output is inverted and
looped back to the sir_in line.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Loopback mode disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Loopback mode enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>AFCE</ipxact:name>
            <ipxact:description>Auto Flow Control Enable
.
Writeable only when AFCE_MODE == Enabled, always readable.  When FIFOs are enabled
and the Auto Flow Control Enable (AFCE) bit is set, Auto Flow Control features are
enabled as described in section 'Auto Flow Control' in data book.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Auto Flow Control Mode disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Auto Flow Control Mode enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>SIRE</ipxact:name>
            <ipxact:description>SIR Mode Enable
.
Writeable only when SIR_MODE == Enabled, always readable.  This is used to enable/
disable the IrDA SIR Mode features as described in section 'IrDA 1.0 SIR Protocol' in the databook.

Note: To enable SIR mode, write the appropriate value to the MCR register before writing to the LCR register.
For details of the recommended programming sequence, refer to 'Programing Examples' section of data book.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>IrDA SIR Mode disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>IrDA SIR Mode enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_MCR_31to7</ipxact:name>
            <ipxact:description>MCR 31to7 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>25</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>LSR</ipxact:name>
          <ipxact:displayName>Line Status Register</ipxact:displayName>
          <ipxact:description>Line Status Register
Reset Value: 0x60</ipxact:description>
          <ipxact:addressOffset>'h14</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>DR</ipxact:name>
            <ipxact:description>Data Ready bit.

This is used to indicate that the receiver contains at least one character in the
RBR or the receiver FIFO.
This bit is cleared when the RBR is read in the non-FIFO mode, or when the receiver
FIFO is empty, in the FIFO mode.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_READY</ipxact:name>
                <ipxact:displayName>data not ready</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>READY</ipxact:name>
                <ipxact:displayName>data ready</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>OE</ipxact:name>
            <ipxact:description>Overrun error bit.

This is used to indicate the occurrence of an overrun error. This occurs if a new data
character was received before the previous data was read.
 In the non-FIFO mode, the OE
bit is set when a new character arrives in the receiver before the previous character
was read from the RBR. When this happens, the data in the RBR is overwritten. In the
FIFO mode, an overrun error occurs when the FIFO is full and a new character arrives at
the receiver. The data in the FIFO is retained and the data in the receive shift register
is lost. 
Reading the LSR clears the OE bit (if LSR_STATUS_CLEAR==1) Or 
Reading the LSR or RBR clears the OE bit (if LSR_STATUS_CLEAR==0). 
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_OVER_RUN_ERROR</ipxact:name>
                <ipxact:displayName>no overrun error</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>OVER_RUN_ERROR</ipxact:name>
                <ipxact:displayName>overrun error</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>PE</ipxact:name>
            <ipxact:description>Parity Error bit.

This is used to indicate the occurrence of a parity error in the receiver if the
Parity Enable (PEN) bit (LCR[3]) is set. 
 In the FIFO mode, since the parity error is
associated with a character received, it is revealed when the character with the parity
error arrives at the top of the FIFO. 

It should be noted that the Parity Error (PE) bit (LSR[2]) will be set if a break
interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). In this situation, the Parity Error
bit is set if parity generation and detection is enabled (LCR[3]=1) and the parity is set to
odd (LCR[4]=0).

Reading the LSR clears the PE bit (if LSR_STATUS_CLEAR==1) Or 
Reading the LSR or RBR clears the PE bit (if LSR_STATUS_CLEAR==0). 
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_PARITY_ERROR</ipxact:name>
                <ipxact:displayName>no parity error</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>PARITY_ERROR</ipxact:name>
                <ipxact:displayName>parity error</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>FE</ipxact:name>
            <ipxact:description>Framing Error bit.

This is used to indicate the occurrence of a framing error in the receiver. A framing
error occurs when the receiver does not detect a valid STOP bit in the received data.

In the FIFO mode, since the framing error is associated with a character received, it
is revealed when the character with the framing error is at the top of the FIFO. When
a framing error occurs the UART will try resynchronize. It does this by assuming that
the error was due to the start bit of the next character and then continues receiving
the other bit i.e. data, and/or parity and stop.

It should be noted that the Framing Error (FE) bit (LSR[3]) will be set if a break
interrupt has occurred, as indicated by Break Interrupt (BI) bit (LSR[4]). This happens because the
break character implicitly generates a framing error by holding the sin input to logic 0 for
longer than the duration of a character.

Reading the LSR clears the FE bit (if LSR_STATUS_CLEAR==1) Or 
Reading the LSR or RBR clears the FE bit (if LSR_STATUS_CLEAR==0). 
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FRAMING_ERROR</ipxact:name>
                <ipxact:displayName>framing error</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_FRAMING_ERROR</ipxact:name>
                <ipxact:displayName>no framing error</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>BI</ipxact:name>
            <ipxact:description>Break Interrupt bit.

This is used to indicate the detection of a break sequence on the serial input data.

If in UART mode it is set whenever the serial input, sin, is held in a logic '0'
state for longer than the sum of start time + data bits + parity + stop bits.

If in infrared mode  it is set whenever the serial input, sir_in, is continuously
pulsed to logic '0' for longer than the sum of start time + data bits + parity + stop
bits.
A break condition on serial input causes one and only one character, consisting of
all zeros, to be received by the UART.
 In the FIFO mode, the character associated
with the break condition is carried through the FIFO and is revealed when the
character is at the top of the FIFO. 


Reading the LSR clears the BI bit (if LSR_STATUS_CLEAR==1) Or 
Reading the LSR or RBR clears the BI bit (if LSR_STATUS_CLEAR==0). 

In the non-FIFO mode, the BI indication occurs immediately and persists until the LSR is
read. 
Note: If a FIFO is full when a break condition is received, a FIFO overrun occurs. The
break condition and all the information associated with it-parity and framing errors-is
discarded; any information that a break character was received is lost.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>BREAK</ipxact:name>
                <ipxact:displayName>Break sequence detected</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_BREAK</ipxact:name>
                <ipxact:displayName>No break sequence detected</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>THRE</ipxact:name>
            <ipxact:description>Transmit Holding Register Empty bit.

If THRE_MODE_USER = Disabled or THRE mode is disabled (IER[7] set to zero) and
regardless of FIFO's being implemented/enabled or not, this bit indicates that
the THR or TX FIFO is empty.
 This bit is set whenever data is transferred from
the THR or TX FIFO to the transmitter shift register and no new data has been
written to the THR or TX FIFO. This also causes a THRE Interrupt to occur, if the
THRE Interrupt is enabled.
If THRE_MODE_USER == Enabled AND FIFO_MODE != NONE and both modes are active
(IER[7] set to one and FCR[0] set to one respectively), the functionality is switched
to indicate the transmitter FIFO is full, and no longer controls THRE interrupts,
which are then controlled by the FCR[5:4] threshold setting. Programmable THRE
interrupt mode operation is described in detail in section 'Programmable THRE Interrupt' in data book.
Reset Value: 0x1</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>THRE interrupt control is disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>THRE interrupt control is enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TEMT</ipxact:name>
            <ipxact:description>Transmitter Empty bit.

If in FIFO mode (FIFO_MODE != NONE) and FIFO's enabled (FCR[0] set to one), this
bit is set whenever the Transmitter Shift Register and the FIFO are both empty.
If in the non-FIFO mode or FIFO's are disabled, this bit is set whenever the
Transmitter Holding Register and the Transmitter Shift Register are both empty.
Reset Value: 0x1</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h1</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Transmitter not empty</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Transmitter empty</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RFE</ipxact:name>
            <ipxact:description>Receiver FIFO Error bit.

This bit is only relevant when FIFO_MODE != NONE AND FIFO's are enabled (FCR[0]
set to one). This is used to indicate if there is at least one parity error, framing
error, or break indication in the FIFO. 

This bit is cleared when the LSR is read and the character with the error is at the
top of the receiver FIFO and there are no subsequent errors in the FIFO.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_RX_FIFO_ERROR</ipxact:name>
                <ipxact:displayName>No error in RX FIFO</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>RX_FIFO_ERROR</ipxact:name>
                <ipxact:displayName>Error in RX FIFO</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_ADDR_RCVD</ipxact:name>
            <ipxact:description>lSR 8 Reserved bit for UART_9BIT_DATA_EN</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_LSR_31to9</ipxact:name>
            <ipxact:description>LSR 31to9 Reserved bits read as zero.</ipxact:description>
            <ipxact:bitOffset>9</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>23</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>MSR</ipxact:name>
          <ipxact:displayName>Modem Status Register</ipxact:displayName>
          <ipxact:description>Whenever bits 0, 1, 2 or 3 is set to logic one, to indicate
a change on the modem control inputs, a modem status interrupt will be generated
if enabled via the IER regardless of when the change occurred. The bits
(bits 0, 1, 3) can be set after a reset-even tthough their respective modem signals are
inactive-because the synchronized version of the modem signals have a reset value of 0 and change to value 1 after reset. To
prevent unwanted interrupts due to this change, a read of the MSR register can be performed after reset.
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'h18</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>DCTS</ipxact:name>
            <ipxact:description>Delta Clear to Send.

This is used to indicate that the modem control line cts_n has changed since the
last time the MSR was read.

Reading the MSR clears the DCTS bit.
In Loopback Mode (MCR[4] set to one), DCTS reflects changes on MCR[1] (RTS).

Note, if the DCTS bit is not set and the cts_n signal is asserted (low) and a reset
occurs (software or otherwise), then the DCTS bit will get set when the reset is
removed if the cts_n signal remains asserted.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>CHANGE</ipxact:name>
                <ipxact:displayName>change on cts_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_CHANGE</ipxact:name>
                <ipxact:displayName>no change on cts_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DDSR</ipxact:name>
            <ipxact:description>Delta Data Set Ready.

This is used to indicate that the modem control line dsr_n has changed since
the last time the MSR was read. 

Reading the MSR clears the DDSR bit.
In Loopback Mode (MCR[4] set to one), DDSR reflects changes on MCR[0] (DTR).

Note, if the DDSR bit is not set and the dsr_n signal is asserted (low) and a reset
occurs (software or otherwise), then the DDSR bit will get set when the reset is
removed if the dsr_n signal remains asserted.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>CHANGE</ipxact:name>
                <ipxact:displayName>change on dsr_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_CHANGE</ipxact:name>
                <ipxact:displayName>no change on dsr_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>TERI</ipxact:name>
            <ipxact:description>Trailing Edge of Ring Indicator.

This is used to indicate that a change on the input ri_n (from an active low, to
an inactive high state) has occurred since the last time the MSR was read.

Reading the MSR clears the TERI bit.
In Loopback Mode (MCR[4] set to one), TERI reflects when MCR[2] (Out1) has changed
state from a high to a low.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>CHANGE</ipxact:name>
                <ipxact:displayName>change on ri_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_CHANGE</ipxact:name>
                <ipxact:displayName>no change on ri_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DDCD</ipxact:name>
            <ipxact:description>Delta Data Carrier Detect.

This is used to indicate that the modem control line dcd_n has changed since the last
time the MSR was read.

Reading the MSR clears the DDCD bit.
In Loopback Mode (MCR[4] set to one), DDCD reflects changes on MCR[3] (Out2).

Note, if the DDCD bit is not set and the dcd_n signal is asserted (low) and a reset
occurs (software or otherwise), then the DDCD bit will get set when the reset is
removed if the dcd_n signal remains asserted.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>CHANGE</ipxact:name>
                <ipxact:displayName>change on dcd_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NO_CHANGE</ipxact:name>
                <ipxact:displayName>No change on dcd_n since last read of MSR</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>CTS</ipxact:name>
            <ipxact:description>Clear to Send.

This is used to indicate the current state of the modem control line cts_n. That is,
this bit is the complement cts_n. When the Clear to Send input (cts_n) is asserted
it is an indication that the modem or data set is ready to exchange data with the
DW_apb_uart.

In Loopback Mode (MCR[4] set to one), CTS is the same as MCR[1] (RTS).
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ASSERTED</ipxact:name>
                <ipxact:displayName>cts_n input is asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>DEASSERTED</ipxact:name>
                <ipxact:displayName>cts_n input is de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DSR</ipxact:name>
            <ipxact:description>Data Set Ready.

This is used to indicate the current state of the modem control line dsr_n. That is
this bit is the complement dsr_n. When the Data Set Ready input (dsr_n) is asserted
it is an indication that the modem or data set is ready to establish communications
with the DW_apb_uart.

In Loopback Mode (MCR[4] set to one), DSR is the same as MCR[0] (DTR).
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ASSERTED</ipxact:name>
                <ipxact:displayName>dsr_n input is asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>DEASSERTED</ipxact:name>
                <ipxact:displayName>dsr_n input is de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RI</ipxact:name>
            <ipxact:description>Ring Indicator.

This is used to indicate the current state of the modem control line ri_n. That is
this bit is the complement ri_n. When the Ring Indicator input (ri_n) is asserted
it is an indication that a telephone ringing signal has been received by the modem
or data set.

In Loopback Mode (MCR[4] set to one), RI is the same as MCR[2] (Out1).
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>6</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ASSERTED</ipxact:name>
                <ipxact:displayName>ri_n input is asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>DEASSERTED</ipxact:name>
                <ipxact:displayName>ri_n input is de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>DCD</ipxact:name>
            <ipxact:description>Data Carrier Detect.

This is used to indicate the current state of the modem control line dcd_n. That is
this bit is the complement dcd_n. When the Data Carrier Detect input (dcd_n) is
asserted it is an indication that the carrier has been detected by the modem or
data set.

In Loopback Mode (MCR[4] set to one), DCD is the same as MCR[3] (Out2).
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>7</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>ASSERTED</ipxact:name>
                <ipxact:displayName>dcd_n input is asserted (logic 0)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>DEASSERTED</ipxact:name>
                <ipxact:displayName>dcd_n input is de-asserted (logic 1)</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_MSR_31to8</ipxact:name>
            <ipxact:description>MSR 31to8 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>SCR</ipxact:name>
          <ipxact:displayName>Scratchpad Register</ipxact:displayName>
          <ipxact:description>Scratchpad Register
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'h1c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>SCR</ipxact:name>
            <ipxact:description>This register is for programmers to use as a temporary storage space. It has no
defined purpose in the DW_apb_uart.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>8</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_SCR_31to8</ipxact:name>
            <ipxact:description>SCR 31to8 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>8</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>24</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:vendorExtensions>
            <snps:register>
              <snps:attribute name="PingTestMask">00000000000000000000000011111111</snps:attribute>
              <snps:attribute name="SideEffects">0</snps:attribute>
            </snps:register>
          </ipxact:vendorExtensions>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>FAR</ipxact:name>
          <ipxact:displayName>FIFO Access Register</ipxact:displayName>
          <ipxact:description>FIFO Access Register</ipxact:description>
          <ipxact:addressOffset>'h70</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>FAR</ipxact:name>
            <ipxact:description>Writes will have no effect when FIFO_ACCESS == No, always readable.  This register
is use to enable a FIFO access mode for testing, so that the receive FIFO can be
written by the master and the transmit FIFO can be read by the master when FIFO's
are implemented and enabled. When FIFOs are not implemented or not enabled it
allows the RBR to be written by the master and the THR to be read by the master.

Note, that when the FIFO access mode is enabled/disabled, the control portion of
the receive FIFO and transmit FIFO is reset and the FIFO's are treated as empty.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>FIFO access mode disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>FIFO access mode enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_FAR_31to1</ipxact:name>
            <ipxact:description>FAR 31to1 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>USR</ipxact:name>
          <ipxact:displayName>UART Status register</ipxact:displayName>
          <ipxact:description>UART Status register.
Reset Value: 0x6</ipxact:description>
          <ipxact:addressOffset>'h7c</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>true</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>BUSY</ipxact:name>
            <ipxact:description>UART Busy.

This bit is only valid when UART_16550_COMPATIBLE == NO. This indicates that a serial
transfer is in progress, when cleared indicates that the DW_apb_uart is idle or inactive.

This bit will be set to 1 (busy) under any of the following conditions:

- Transmission in progress on serial interface

- Transmit data present in THR, when FIFO access mode is not being used (FAR = 0) and the baud divisor is non-zero ({DLH,DLL} does not equal 0) when the divisor latch access bit is 0 (LCR.DLAB = 0)

- Reception in progress on the interface

- Receive data present in RBR, when FIFO access mode is not being used (FAR = 0)


Note: It is possible for the UART Busy bit to be cleared even though a new
character may have been sent from another device. That is, if the DW_apb_uart
has no data in the THR and RBR and there is no transmission in progress and a start
bit of a new character has just reached the DW_apb_uart. This is due to the fact
that a valid start is not seen until the middle of the bit period and this duration
is dependent on the baud divisor that has been programmed. If a second system clock
has been implemented (CLOCK_MODE == Enabled), the assertion of this bit will also be
delayed by several cycles of the slower clock.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>BUSY</ipxact:name>
                <ipxact:displayName>DW_apb_uart is busy (actively transferring data)</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>IDLE</ipxact:name>
                <ipxact:displayName>DW_apb_uart is idle or inactive</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_TFNF</ipxact:name>
            <ipxact:description>Transmit FIFO Not Full.

This bit is only valid when FIFO_STAT == NO. This is used to indicate that the
transmit FIFO in not full.
This bit is cleared when the TX FIFO is full.
Reset Value: 0x1</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FULL</ipxact:name>
                <ipxact:displayName>Transmit FIFO is full</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_FULL</ipxact:name>
                <ipxact:displayName>Transmit FIFO is not full</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_TFE</ipxact:name>
            <ipxact:description>Transmit FIFO Empty.

This bit is only valid when FIFO_STAT == NO. This is used to indicate that the
transmit FIFO is completely empty.
This bit is cleared when the TX FIFO is no longer empty.
Reset Value: 0x1</ipxact:description>
            <ipxact:bitOffset>2</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>EMPTY</ipxact:name>
                <ipxact:displayName>Transmit FIFO is empty</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_EMPTY</ipxact:name>
                <ipxact:displayName>Transmit FIFO is not empty</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_RFNE</ipxact:name>
            <ipxact:description>Receive FIFO Not Empty.

This bit is only valid when FIFO_STAT == NO. This is used to indicate that the
receive FIFO contains one or more entries.
This bit is cleared when the RX FIFO is empty.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>3</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>EMPTY</ipxact:name>
                <ipxact:displayName>Receive FIFO is empty</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_EMPTY</ipxact:name>
                <ipxact:displayName>Receive FIFO is not empty</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_RFF</ipxact:name>
            <ipxact:description>Receive FIFO Full.

This bit is only valid when FIFO_STAT == NO. This is used to indicate that the
receive FIFO is completely full. That is:
This bit is cleared when the RX FIFO is no longer full.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>4</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>FULL</ipxact:name>
                <ipxact:displayName>Receive FIFO full</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>NOT_FULL</ipxact:name>
                <ipxact:displayName>Receive FIFO not full</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_USR_31to5</ipxact:name>
            <ipxact:description>USR 31to5 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>5</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>27</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>HTX</ipxact:name>
          <ipxact:displayName>Halt TX</ipxact:displayName>
          <ipxact:description>Halt TX
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'ha4</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-write</ipxact:access>
          <ipxact:field>
            <ipxact:name>HTX</ipxact:name>
            <ipxact:description>Halt TX.

Writes will have no effect when FIFO_MODE == NONE, always readable.  This register
is use to halt transmissions for testing, so that the transmit FIFO can be filled
by the master when FIFO's are implemented and enabled.

Note, if FIFO's are implemented and not enabled the setting of the halt TX register
will have no effect on operation.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-write</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>DISABLED</ipxact:name>
                <ipxact:displayName>Halt Transmission disabled</ipxact:displayName>
                <ipxact:value>0x0</ipxact:value>
              </ipxact:enumeratedValue>
              <ipxact:enumeratedValue>
                <ipxact:name>ENABLED</ipxact:name>
                <ipxact:displayName>Halt Transmission enabled</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_HTX_31to1</ipxact:name>
            <ipxact:description>HTX 31to1 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
        <ipxact:register>
          <ipxact:name>DMASA</ipxact:name>
          <ipxact:displayName>DMA Software Acknowledge Register</ipxact:displayName>
          <ipxact:description>DMA Software Acknowledge Register
Reset Value: 0x0</ipxact:description>
          <ipxact:addressOffset>'ha8</ipxact:addressOffset>
          <ipxact:size>32</ipxact:size>
          <ipxact:volatile>false</ipxact:volatile>
          <ipxact:access>read-only</ipxact:access>
          <ipxact:field>
            <ipxact:name>DMASA</ipxact:name>
            <ipxact:description>DMA Software Acknowledge.

Writes will have no effect when DMA_EXTRA == No.  This register is use to perform
DMA software acknowledge if a transfer needs to be terminated due to an error
condition. For example, if the DMA disables the channel, then the DW_apb_uart should
clear its request. This will cause the TX request, TX single, RX request and RX
single signals to de-assert.
Note that this bit is 'self-clearing' and it is not necessary to clear this bit.
Reset Value: 0x0</ipxact:description>
            <ipxact:bitOffset>0</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>1</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:enumeratedValues>
              <ipxact:enumeratedValue>
                <ipxact:name>SOFT_ACK</ipxact:name>
                <ipxact:displayName>DMA software acknowledge</ipxact:displayName>
                <ipxact:value>0x1</ipxact:value>
              </ipxact:enumeratedValue>
            </ipxact:enumeratedValues>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
          <ipxact:field>
            <ipxact:name>RSVD_DMASA_31to1</ipxact:name>
            <ipxact:description>DMASA 31to1 Reserved bits read as 0.</ipxact:description>
            <ipxact:bitOffset>1</ipxact:bitOffset>
            <ipxact:resets>
              <ipxact:reset>
                <ipxact:value>'h0</ipxact:value>
              </ipxact:reset>
            </ipxact:resets>
            <ipxact:bitWidth>31</ipxact:bitWidth>
            <ipxact:access>read-only</ipxact:access>
            <ipxact:reserved>0</ipxact:reserved>
          </ipxact:field>
        </ipxact:register>
      </ipxact:addressBlock>
      <ipxact:addressUnitBits>8</ipxact:addressUnitBits>
    </ipxact:memoryMap>
  </ipxact:memoryMaps>
  <ipxact:model>
    <ipxact:views>
      <ipxact:view>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:envIdentifier>:*Synthesis:</ipxact:envIdentifier>
        <ipxact:componentInstantiationRef>RTL</ipxact:componentInstantiationRef>
      </ipxact:view>
    </ipxact:views>
    <ipxact:instantiations>
      <ipxact:componentInstantiation>
        <ipxact:name>RTL</ipxact:name>
        <ipxact:description>No description available.</ipxact:description>
        <ipxact:language strict="true">verilog</ipxact:language>
        <ipxact:moduleName>i_uart_DW_apb_uart</ipxact:moduleName>
        <ipxact:fileSetRef>
          <ipxact:localName>Hdl</ipxact:localName>
        </ipxact:fileSetRef>
      </ipxact:componentInstantiation>
    </ipxact:instantiations>
    <ipxact:ports>
      <ipxact:port>
        <ipxact:name>paddr</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>7</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pclk</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:drivers>
            <ipxact:driver>
              <ipxact:clockDriver>
                <ipxact:clockPeriod>8</ipxact:clockPeriod>
                <ipxact:clockPulseOffset>0</ipxact:clockPulseOffset>
                <ipxact:clockPulseValue>1</ipxact:clockPulseValue>
                <ipxact:clockPulseDuration>4</ipxact:clockPulseDuration>
              </ipxact:clockDriver>
            </ipxact:driver>
          </ipxact:drivers>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>penable</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>presetn</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>psel</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pwdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>pwrite</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>prdata</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
          <ipxact:vectors>
            <ipxact:vector>
              <ipxact:left>31</ipxact:left>
              <ipxact:right>0</ipxact:right>
            </ipxact:vector>
          </ipxact:vectors>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>scan_mode</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dma_rx_req</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dma_tx_req</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rxrdy_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>txrdy_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>intr</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>cts_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dcd_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="SimTieOff">one</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dsr_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="SimTieOff">one</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>ri_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
        <ipxact:vendorExtensions>
          <snps:componentSignal>
            <snps:attribute name="SimTieOff">one</snps:attribute>
          </snps:componentSignal>
        </ipxact:vendorExtensions>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>dtr_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>out1_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>out2_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>rts_n</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>sin</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>in</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
      <ipxact:port>
        <ipxact:name>sout</ipxact:name>
        <ipxact:wire>
          <ipxact:direction>out</ipxact:direction>
        </ipxact:wire>
      </ipxact:port>
    </ipxact:ports>
  </ipxact:model>
  <ipxact:fileSets>
    <ipxact:fileSet>
      <ipxact:name>Hdl</ipxact:name>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_cc_constants.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm_params.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm57.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm25.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm23.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm21.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm41.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm06.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bcm99.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_biu.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_rst.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_regfile.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_fifo.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_async_rst_gen.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_sync.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_mc_sync.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_bclk_gen.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_tx.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_rx.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart_to_det.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
      <ipxact:file>
        <ipxact:name>i_uart/src/DW_apb_uart-undef.v</ipxact:name>
        <ipxact:fileType>verilogSource</ipxact:fileType>
        <ipxact:logicalName>work</ipxact:logicalName>
      </ipxact:file>
    </ipxact:fileSet>
  </ipxact:fileSets>
  <ipxact:parameters>
    <ipxact:parameter parameterId="UART_RS485_INTERFACE_EN" resolve="immediate" type="longint">
      <ipxact:name>UART_RS485_INTERFACE_EN</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="UART_DE_POL" resolve="immediate" type="bit">
      <ipxact:name>UART_DE_POL</ipxact:name>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="UART_RE_POL" resolve="immediate" type="bit">
      <ipxact:name>UART_RE_POL</ipxact:name>
      <ipxact:value>'h1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="UART_9BIT_DATA_EN" resolve="immediate" type="longint">
      <ipxact:name>UART_9BIT_DATA_EN</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="APB_DATA_WIDTH" resolve="immediate" type="longint">
      <ipxact:name>APB_DATA_WIDTH</ipxact:name>
      <ipxact:value>32</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="FIFO_MODE" resolve="immediate" type="longint">
      <ipxact:name>FIFO_MODE</ipxact:name>
      <ipxact:value>16</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="MEM_SELECT_USER" resolve="immediate" type="longint">
      <ipxact:name>MEM_SELECT_USER</ipxact:name>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="SIR_MODE" resolve="immediate" type="bit">
      <ipxact:name>SIR_MODE</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="SIR_LP_MODE" resolve="immediate" type="bit">
      <ipxact:name>SIR_LP_MODE</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="SIR_LP_RX" resolve="immediate" type="longint">
      <ipxact:name>SIR_LP_RX</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="CLOCK_MODE" resolve="immediate" type="longint">
      <ipxact:name>CLOCK_MODE</ipxact:name>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="AFCE_MODE" resolve="immediate" type="bit">
      <ipxact:name>AFCE_MODE</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="RTC_FCT" resolve="immediate" type="bit">
      <ipxact:name>RTC_FCT</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="THRE_MODE_USER" resolve="immediate" type="bit">
      <ipxact:name>THRE_MODE_USER</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="CLK_GATE_EN" resolve="immediate" type="longint">
      <ipxact:name>CLK_GATE_EN</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="FIFO_ACCESS" resolve="immediate" type="bit">
      <ipxact:name>FIFO_ACCESS</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DMA_EXTRA" resolve="immediate" type="bit">
      <ipxact:name>DMA_EXTRA</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DMA_POL" resolve="immediate" type="longint">
      <ipxact:name>DMA_POL</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DMA_HS_REQ_ON_RESET" resolve="immediate" type="longint">
      <ipxact:name>DMA_HS_REQ_ON_RESET</ipxact:name>
      <ipxact:value>1</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DEBUG" resolve="immediate" type="longint">
      <ipxact:name>DEBUG</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="BAUD_CLK" resolve="immediate" type="longint">
      <ipxact:name>BAUD_CLK</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="ADDITIONAL_FEATURES" resolve="immediate" type="bit">
      <ipxact:name>ADDITIONAL_FEATURES</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="FIFO_STAT" resolve="immediate" type="bit">
      <ipxact:name>FIFO_STAT</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="SHADOW" resolve="immediate" type="bit">
      <ipxact:name>SHADOW</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="UART_ADD_ENCODED_PARAMS" resolve="immediate" type="bit">
      <ipxact:name>UART_ADD_ENCODED_PARAMS</ipxact:name>
      <ipxact:value>'h0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="UART_16550_COMPATIBLE" resolve="immediate" type="longint">
      <ipxact:name>UART_16550_COMPATIBLE</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="FRACTIONAL_BAUD_DIVISOR_EN" resolve="immediate" type="longint">
      <ipxact:name>FRACTIONAL_BAUD_DIVISOR_EN</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="DLF_SIZE" resolve="immediate" type="longint">
      <ipxact:name>DLF_SIZE</ipxact:name>
      <ipxact:value>4</ipxact:value>
    </ipxact:parameter>
    <ipxact:parameter parameterId="LSR_STATUS_CLEAR" resolve="immediate" type="longint">
      <ipxact:name>LSR_STATUS_CLEAR</ipxact:name>
      <ipxact:value>0</ipxact:value>
    </ipxact:parameter>
  </ipxact:parameters>
  <ipxact:vendorExtensions>
    <snps:component>
      <snps:checksum>2BFHDRguWLFDhRiLKbJigg==</snps:checksum>
      <snps:attribute name="OriginalUnelabName">DW_apb_uart</snps:attribute>
      <snps:attribute name="SymbolType">slave</snps:attribute>
      <snps:attribute name="SimPingTestText[axi]">// reuse-pragma startSub ALL [::sVer::replace %subText]
// ---------------------------------------------------------------------
//
//    This confidential and proprietary software may be used only
//    as authorized by a licensing agreement from Synopsys Inc.
//    In the event of publication, the following notice is applicable:
//
//                   (C) COPYRIGHT 2007 SYNOPSYS INC.
//                          ALL RIGHTS RESERVED
//
//  The entire notice above must be reproduced on all authorized copies.
// ---------------------------------------------------------------------

# reuse-pragma startSub [::sVer::get_slave_base_addr %%C%% APB_Slave 0 %%H%% ]

`define DW_apb_uart_OFFSET  8'h1C

task test_ping_%%L_%%_by_%%M%%;
 
 integer   nCmdHandle;
 integer   nWriteBufferHandle;
 integer   nReadBufferHandle;
 integer   ResultBufHandle;
 
 reg [1:0] bresp;
 reg [7:0] read_data;
 reg [7:0] write_data;
  begin
   $display("\n=====: STARTING %%L%% PING TEST from %%M%%");
    //---------------------------------------------------------------------
    // Enable messages
    //---------------------------------------------------------------------
     %%H%%.enable_msg_type    (0, `VMT_MSG_ALL,       `VMT_MSG_ROUTE_ALL);
     %%H%%.enable_msg_type    (0, `VMT_MSG_NOTIFY,    `VMT_MSG_ROUTE_ALL);
     %%H%%.enable_msg_feature (0, `VMT_MSG_SCOPE_ALL, `VMT_MSG_FEATURES_ALL, `VMT_MSG_ROUTE_ALL);
     %%H%%.disable_msg_type   (0, `VMT_MSG_CMD,       `VMT_MSG_ROUTE_ALL);
     
     
    //-----------------------------------------------------------------------
    // Create buffers for write, read, and slave response with default values
    //-----------------------------------------------------------------------
     %%H%%.new_buffer (nWriteBufferHandle);
     %%H%%.new_buffer (nReadBufferHandle);
    //-----------------------------------------------------------------------
    // Fill up transaction buffer for a write transaction
    //-----------------------------------------------------------------------
     // Set the value for write data
     write_data = 8'h01;
     // Set write transaction for write
     %%H%%.set_buffer_attr_int    (nWriteBufferHandle, `DW_VIP_AXI_WRITE, 0, `VMT_TRUE);
     // Set address for write
     %%H%%.set_buffer_attr_bitvec (nWriteBufferHandle, `DW_VIP_AXI_ADDR,  0, 
                                     (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET) );
     // Set size of write to a 32 bit word 
     %%H%%.set_buffer_attr_bitvec (nWriteBufferHandle, `DW_VIP_AXI_ASIZE,  0, 3'b010); 
     // Set data for write 
     %%H%%.set_buffer_attr_bitvec (nWriteBufferHandle, `DW_VIP_AXI_DATA, 0, write_data[7:0]);
     // Set a 2 cycle delay on AVALID
     %%H%%.set_buffer_attr_int    (nWriteBufferHandle, `DW_VIP_AXI_AVALID_WVALID_DELAY, 0, 2);
     
    //-------------------------------------------------------------------------
    // Execute write transaction
    //-------------------------------------------------------------------------
    $display("      %0t Issuing write command: write_data = %h, write_address = %h  ", 
                $time, write_data[7:0],  (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET)); 
      %%H%%.send_xact(0, nWriteBufferHandle,     nCmdHandle);
      
    //-------------------------------------------------------------------------
    // Get response for write transaction
    //-------------------------------------------------------------------------
     %%H%%.get_result(0,   nCmdHandle, ResultBufHandle);
     %%H%%.get_buffer_attr_bitvec ( ResultBufHandle, `DW_VIP_AXI_RESP, 0, bresp);
     if (bresp == 2'b00)
       $display("      %0t The write response from the slave was OK ", $time);
     else 
       $display("      %0t Error: The write response from the slave was not OK", $time);
      
    //--------------------------------------------------------------------------
    // Fll up transaction buffer for read transaction 
    //--------------------------------------------------------------------------
     // Set write transaction for read
     %%H%%.set_buffer_attr_int    (nReadBufferHandle, `DW_VIP_AXI_WRITE, 0, `VMT_FALSE);
     // Set address for read
     %%H%%.set_buffer_attr_bitvec (nReadBufferHandle, `DW_VIP_AXI_ADDR, 0,
                                    (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET));
     // Set size of read to a 32 bit word 
     %%H%%.set_buffer_attr_bitvec (nReadBufferHandle, `DW_VIP_AXI_ASIZE,  0, 3'b010); 
     // Set read expected data
     %%H%%.set_buffer_attr_bitvec (nReadBufferHandle, `DW_VIP_AXI_READ_EXPECT_DATA,
                                      0, write_data[7:0]);
     // Set read expected data
     %%H%%.set_buffer_attr_bitvec (nReadBufferHandle, `DW_VIP_AXI_READ_EXPECT_RESP, 0, 0);
     // Enable read expect
     %%H%%.set_buffer_attr_int    (nReadBufferHandle, `DW_VIP_AXI_READ_EXPECT, 0, `VMT_TRUE);
     
    //---------------------------------------------------------------------------
    // Execute read transaction 
    //---------------------------------------------------------------------------
     $display("      %0t Issuing read expect command to address =  %h" , $time,
                         (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET)); 
     %%H%%.send_xact(0, nReadBufferHandle,     nCmdHandle);
     
    //---------------------------------------------------------------------------
    // Get response for read transaction
    //---------------------------------------------------------------------------
     %%H%%.get_result(0,   nCmdHandle, ResultBufHandle);
     %%H%%.get_buffer_attr_bitvec ( ResultBufHandle, `DW_VIP_AXI_DATA, 0, read_data);
     $display("      %0t The data read from the slave:  read_data = %h" , $time, read_data);
     
   $display("=====: Done\n");
  end
  
endtask
// reuse-pragma endSub ALL</snps:attribute>
      <snps:attribute name="SimPingTestText[ahb]">// reuse-pragma startSub ALL [::sVer::replace %subText]
// ---------------------------------------------------------------------
//
//    This confidential and proprietary software may be used only
//    as authorized by a licensing agreement from Synopsys Inc.
//    In the event of publication, the following notice is applicable:
//
//                   (C) COPYRIGHT 2007 SYNOPSYS INC.
//                          ALL RIGHTS RESERVED
//
//  The entire notice above must be reproduced on all authorized copies.
// ---------------------------------------------------------------------

# reuse-pragma startSub [::sVer::get_slave_base_addr %%C%% APB_Slave 0 %%H%% ]

`define DW_apb_uart_OFFSET  8'h1C

task test_ping_%%L_%%_by_%%M%%;
 reg [7:0] write_data;
  begin
    write_data = 8'h01;
   $display("\n=====: STARTING %%L%% PING TEST from %%M%%");
   $display("      %0t Issuing write command: write_data = %h, write_address = %h  ", 
                $time, write_data[7:0],  (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET)); 
   
   //-: perform write followed by read
   %%H%%.write      (0, (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET),
                     write_data[7:0], `DW_VIP_AMBA_XFER_SIZE_32, handle[0]);
   //-: block stream needed if testing AHB-&gt;AXI-&gt;APB
   %%H%%.block_stream (0, 0, status);
   $display("      %0t Issuing read expect command to address =  %h" , $time,
                         (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET)); 
   %%H%%.read_expect(0, (`%%L_%%_BASE_ADDR + `DW_apb_uart_OFFSET),
                     write_data[7:0], `DW_VIP_AMBA_XFER_SIZE_32 );
   
   $display("=====: Done\n");
  end
  
endtask
// reuse-pragma endSub ALL</snps:attribute>
    </snps:component>
  </ipxact:vendorExtensions>
</ipxact:component>

